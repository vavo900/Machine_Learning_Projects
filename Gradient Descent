{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "1Rg2uSiFSRJe"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import special\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import time\n",
    "import math\n",
    "from sklearn import datasets\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 1\n",
    "## Dataset Generation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function to **generate a training set** of size $m$\n",
    "- randomly generate a weight vector $w \\in \\mathbb{R}^{10}$, normalize length\n",
    "- generate a training set $\\{(x_i , y_i)\\}$ of size m\n",
    "  - $x_i$: random vector in $\\mathbb{R}^{10}$ from $\\textbf{N}(0, I)$\n",
    "  - $y_i$: $\\{0, +1\\}$ with $P[y = +1] = \\sigma(w \\cdot x_i)$ and $P[y = 0] = 1 - \\sigma(w \\cdot x_i)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def generate_data(m):\n",
    "    # returns the true w as well as X, Y data\n",
    "    ...\n",
    "\n",
    "    w = np.random.randn(10)\n",
    "    a = np.linalg.norm(w)\n",
    "    # b = np.sqrt(np.sum(np.square(w)))\n",
    "    w2 = w/a\n",
    "    # c = np.linalg.norm(w2)\n",
    "\n",
    "    # m = 50\n",
    "    x = np.random.randn(m, 10)\n",
    "\n",
    "    y = np.dot(x, w2)\n",
    "    y = special.expit(y)\n",
    "    # d = np.dot(w, x[0])\n",
    "    # e = x[0]\n",
    "    y2 = np.zeros(m)\n",
    "\n",
    "    for i in range(0, m):\n",
    "        y2[i] = np.random.choice(2, 1, p=[1-y[i], y[i]])\n",
    "\n",
    "    return w2, x, y2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Algorithm 1: logistic regression\n",
    "\n",
    "The goal is to learn $w$.  Algorithm 1 is logistic\n",
    "  regression (you may use the built-in method LogisticRegression for this. Use max_iter=1000)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 0.28127121925354004 seconds ---\n"
     ]
    }
   ],
   "source": [
    "\n",
    "start_time = time.time()\n",
    "acc_log_reg = np.zeros(5)\n",
    "count = 0\n",
    "\n",
    "for m in range(50, 300, 50):\n",
    "    acc_temp = np.zeros(10)\n",
    "    for i in range(0, 10):\n",
    "        w_orig, x, y = generate_data(m)\n",
    "\n",
    "        log_reg = LogisticRegression(max_iter=1000)\n",
    "        log_reg.fit(x, y)\n",
    "        w_prime = log_reg.coef_\n",
    "        diff_w = w_orig - w_prime\n",
    "        acc_temp[i] = np.linalg.norm(diff_w)\n",
    "    acc_log_reg[count] = np.average(acc_temp)\n",
    "    count += 1\n",
    "\n",
    "time_taken = time.time() - start_time\n",
    "print(\"--- %s seconds ---\" % time_taken)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Algorithm 2: gradient descent with square loss\n",
    "\n",
    "Define square loss as\n",
    "$$L_i(w^{(t)}) = \\frac{1}{2} \\left( \\sigma(w^{(t)} \\cdot x) - y_i \\right)^2$$\n",
    "\n",
    "  Algorithm 2 is\n",
    "  gradient descent with respect to square loss (code this\n",
    "  up yourself -- run for 1000 iterations, use step size eta = 0.01).\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The value of my gradient function is(sigmoid(w'*x) - y)*((1+exp(-w'*x))^-2 * x * exp(-w'*x))\n",
      "--- 77.7946994304657 seconds ---\n"
     ]
    }
   ],
   "source": [
    "\n",
    "start_time = time.time()\n",
    "step_size = 0.01\n",
    "max_iterations = 1000\n",
    "acc_log_gd = np.zeros(5)\n",
    "count = 0\n",
    "\n",
    "for m in range(50, 300, 50):\n",
    "    acc_temp = np.zeros(10)\n",
    "\n",
    "    for k in range(0, 10):\n",
    "\n",
    "        w, x, y = generate_data(m)\n",
    "        w_prime = np.zeros(10)\n",
    "\n",
    "        for j in range(0, max_iterations):\n",
    "\n",
    "            gradient = np.zeros(10)\n",
    "\n",
    "            for i in range(0, m):\n",
    "                gradient += (special.expit(np.dot(w_prime, x[i])) - y[i])\\\n",
    "                            * (((1 + math.exp(-np.dot(w_prime, x[i]))) ** -2)*x[i]*math.exp(-np.dot(w_prime, x[i])))\n",
    "\n",
    "            gradient = gradient/m\n",
    "\n",
    "            w_prime = w_prime - step_size*gradient\n",
    "\n",
    "        diff_w = w - w_prime\n",
    "        acc_temp[k] = np.linalg.norm(diff_w)\n",
    "\n",
    "    acc_log_gd[count] = np.average(acc_temp)\n",
    "    count += 1\n",
    "\n",
    "print(\"The value of my gradient function is\"\n",
    "      \"(sigmoid(w'*x) - y)*((1+exp(-w'*x))^-2 * x * exp(-w'*x))\")\n",
    "time_taken = time.time() - start_time\n",
    "print(\"--- %s seconds ---\" % time_taken)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Algorithm 3: stochastic gradient descent with square loss\n",
    "Similar to gradient descent, except we use the gradient at a single random training point every iteration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 1.3895583152770996 seconds ---\n"
     ]
    }
   ],
   "source": [
    "\n",
    "start_time = time.time()\n",
    "step_size = 0.01\n",
    "max_iterations = 1000\n",
    "acc_log_sgd = np.zeros(5)\n",
    "count = 0\n",
    "\n",
    "for m in range(50, 300, 50):\n",
    "    acc_temp = np.zeros(10)\n",
    "\n",
    "    for k in range(0, 10):\n",
    "\n",
    "        w, x, y = generate_data(m)\n",
    "        w_prime = np.zeros(10)\n",
    "\n",
    "        for j in range(0, max_iterations):\n",
    "\n",
    "            gradient = np.zeros(10)\n",
    "\n",
    "            i = np.random.choice(m)\n",
    "\n",
    "            gradient += (special.expit(np.dot(w_prime, x[i])) - y[i])\\\n",
    "                        * (((1 + math.exp(-np.dot(w_prime, x[i]))) ** -2)*x[i]*math.exp(-np.dot(w_prime, x[i])))\n",
    "\n",
    "            w_prime = w_prime - step_size*gradient\n",
    "\n",
    "        diff_w = w - w_prime\n",
    "        acc_temp[k] = np.linalg.norm(diff_w)\n",
    "\n",
    "    acc_log_sgd[count] = np.average(acc_temp)\n",
    "    count += 1\n",
    "\n",
    "time_taken = time.time() - start_time\n",
    "print(\"--- %s seconds ---\" % time_taken)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluation\n",
    "\n",
    "Measure error $\\|w - \\hat{w}\\|_2$ for each method at different sample size. For any\n",
    "  fixed value of $m$, choose many different $w$'s and average the\n",
    "  values $\\|w - \n",
    "  \\hat{w}\\|_2$ for Algorithms 1, 2 and 3.  Plot the results\n",
    "  for for each algorithm as you make $m$ large (use $m=50, 100, 150, 200, 250$).\n",
    "  Also record, for each algorithm, the time taken to run the overall experiment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m_arr = np.arange(50, 300, 50)\n",
    "\n",
    "\n",
    "plt.plot(m_arr, acc_log_reg, label=\"Logistic Regression Accuracy\")\n",
    "plt.plot(m_arr, acc_log_gd, label=\"Gradient Descent\")\n",
    "plt.plot(m_arr, acc_log_sgd, label=\"Stochastic Gradient Descent\")\n",
    "plt.xlabel(\"Number of training values m\")\n",
    "plt.ylabel(\"Accuracy (norm(w - w'))\")\n",
    "plt.title(\"Accuracy for Logistic Regression, GD, and SGD\", fontsize=16, fontweight='bold')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn import datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "cancer = datasets.load_breast_cancer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each depth in $1, \\dots, 5$, instantiate an AdaBoost classifier with the base learner set to be a decision tree of that depth (set `n_estimators=10` and `learning_rate=1`), and then record the 10-fold cross-validated error on the entire breast cancer data set. Plot the resulting curve of accuracy against base classifier depth. Use $101$ as your random state for both the base learner as well as the AdaBoost classifier every time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "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GVO9HP+6tlGm9cuXL6dVq1aZ1v/6668sX76c2rVrs2jRIj744AN++eUXVJXWrVsTHx/Pxo0bqV69Ol9++SUAycnJ7Nu3j6lTp7J69WpEhAMHDpy27euuu442bdrwyiuvADBx4kSefPJJAMaOHUulSpU4evQoF110Eb1796Zy5cp+Y5w6dSpr1qxh2bJl7Nq1i5iYGO666y4A+vXrxzPPOCeRt912G9OnT+e6665j1KhRDBs2jNjYWE6ePEn//v35/PPPqVKlyqk4xo4dy5133skbb7xBfHw8jz76qN/XL1GiBFOnTqVcuXLs2bOHiy++mG7durFy5UpeeOEFfvzxRyIiIti3z+lTHjBgAPHx8UydOpW0tDRSUlLYv39/pr8DgAMHDvD9998DsH//fn7++WdEhPfee49XXnmFV199leeee47y5cuzbNmyU+2KFStG06ZNeeWVVwgPD+eDDz7gnXfeyfK1jDkTqsqMlbt4bcZaVu88RIPzyvLu7bFc0bBqrgwCCWZSuQD3XuWuRKC1T5slQG9gJNATKCsilVV1L1BCRBJw7n3+sqr6JpyewCxV9b7rtxGRJTj3ph6oqit8gxKRe4F7AWrWrHnWOxcqcXFxp76/MH/+fHr27Enp0qUB6NWrFz/88ANdunRh4MCBPP7443Tt2pW2bduSmppKiRIluOeee7jmmmvo2rXraduuUqUKderU4eeffyY6Opo1a9Zw6aWXAvD6668zdepUALZu3cq6desyTSrz5s2jT58+hIWFUb16dTp06HCqbs6cObzyyiscOXKEffv20ahRI6699tq/rL9mzRqWL19Op06dAKer7/zzzyc5OZkDBw4QHx8POEnp66+/Pu31VZUnnniCefPmUaRIEbZt28auXbuYPXs21113HREREQBUquR8Wps9ezbjx48HICwsjPLly2ebVG688cZTzxMTE7nxxhvZsWMHJ06cOPX7mTlzJhMmTDjVrmLFigB06NCB6dOn07BhQ06ePHnqrNOYc6Gq/LBuD69+t4YlicnUiSjN631a0LXJ+RQpknsjCoOZVPzthe8dwQYCo0SkLzAP2IaTRABqqup2EakDzBaRZaq6wbNuH/5669ffgFqqmiIiV+Oc9USfFoDqGGAMQGxsbJZ3KMvqjCJYGjVqlOVF7YwEAs4fkT/16tVj0aJFfPXVVwwePJjOnTvzzDPP8OuvvzJr1iwmTJjAqFGjmDFjxqmzom7dujF06FBuvPFGJk2aRIMGDejZsyciwty5c5k5cyYLFiygVKlStGvXLtvvUfj7RHTs2DEeeOABEhISqFGjBkOGDPG7HVWlUaNGLFiw4C/lBw4cCOiT1kcffURSUhKLFi0iPDycqKgojh07hqoG/EmtaNGipKen/yV2L+/voX///jzyyCN069aNuXPnnuomy+z17rnnHl588UUaNGjAnXcG7UTbFCILN+/j/75dw6+b9nFBhZK80rspvVpeQNGw3B+LFcxXTARqeJYjcc4gTlHV7araS1VbAE+6ZckZde7PjcBcoEXGeiJSGad77UvPtg6qaor7/CsgXEQicn63gqtDhw4cP36cd99991TZwoULT3W1eF1++eV89tlnHDlyhMOHDzN16lTatm3L9u3bKVWqFLfeeisDBw7kt99+IyUlheTkZK6++mpGjBjB4sWLCQsLY/HixSxevJihQ51LUL169eKzzz7jf//736lP48nJyVSsWJFSpUqxevVqfv755yz34fLLL2fChAmkpaWxY8cO5syZA/z5xhwREUFKSspfkmfZsmU5dOgQAPXr1ycpKelUUjl58iQrVqygQoUKlC9fnvnz5wNO8vAnOTmZqlWrEh4ezpw5c9iyxZmlu2PHjkyaNIm9e/cCnOr+6tixI6NHjwacs6KDBw9SrVo1du/ezd69ezl+/DjTp0/PdH+Tk5O54IILABg3btyp8s6dOzNq1KhTyxlnP61bt2br1q18/PHH9OnTJ8tjaUxWliYe4I6xv3L92wvYtOcwQ7s3YvbAeG64qEZIEgoEN6ksBKJFpLaIFANuAqZ5G4hIhIhkxDAYGOuWVxSR4hltgEv567WY64HpqnrMs63zxP1YKCJxOPu2Nyh7FkQiwtSpU5kxYwYXXnghjRo1YsiQIVSvXv20ti1btqRv377ExcXRunVr7rnnHlq0aMGyZcuIi4ujefPmvPDCCzz11FMcOnSIrl270rRpU+Lj4xk+fLjf169YsSIxMTFs2bKFuLg4ALp06UJqaipNmzbl6aef5uKLL85yH3r27El0dDRNmjTh/vvvP9VdVaFCBf72t7/RpEkTevTowUUXXXRqnb59+3LffffRvHlz0tLSmDx5Mo8//jjNmjWjefPmp0aWffDBBzz44IO0adOGkiVL+n39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\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "cancer = datasets.load_breast_cancer()\n",
    "\n",
    "df = pd.DataFrame(cancer.data, columns = cancer.feature_names)\n",
    "df['target'] = cancer.target\n",
    "df['diagnosis'] = np.array([cancer.target_names[i] for i in cancer.target])\n",
    "\n",
    "target = df['target']\n",
    "q = np.where(target == 0)[0]\n",
    "# malignancy_count = len(q)\n",
    "\n",
    "rows, columns = df.shape\n",
    "\n",
    "# rate_of_malignancy = malignancy_count/rows\n",
    "\n",
    "# print(\"The base rate of malignant cancer occurence is: \", rate_of_malignancy)\n",
    "\n",
    "features_data = df.drop(['target', 'diagnosis'], axis=1)\n",
    "target_data = df['target']\n",
    "\n",
    "# X_train, X_test, y_train, y_test = train_test_split(features_data, target_data, test_size=0.1, random_state = 101)\n",
    "\n",
    "\n",
    "\n",
    "cross_val_accuracy = np.zeros(5)\n",
    "max_depth_arr = np.arange(1, 6)\n",
    "\n",
    "\n",
    "for i in range(1, 6):\n",
    "\n",
    "    ada_cancer = AdaBoostClassifier(\n",
    "        DecisionTreeClassifier(max_depth=i, random_state=101),\n",
    "        n_estimators=10,\n",
    "        learning_rate=1,\n",
    "        random_state=101)\n",
    "\n",
    "    scores = cross_val_score(ada_cancer, features_data, target_data, cv=10)\n",
    "    cross_val_accuracy[i-1] = scores.mean()\n",
    "\n",
    "\n",
    "plt.plot(max_depth_arr, cross_val_accuracy, label=\"Cross-validated accuracy\")\n",
    "plt.xlabel(\"Max depth of tree\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.title(\"Accuracy and Max Depth\", fontsize=16, fontweight='bold')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "hw2_programming_sol.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}